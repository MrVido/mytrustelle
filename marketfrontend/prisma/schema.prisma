// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------
// User Models
// --------------------------------

// Enum for defining user roles with distinct access levels.
enum RoleType {
  SUB_USER // Level 1, default for all new users
  USER // Parent of SUB_USER
  SALES // For Sales Dept
  ADMIN // For Operations team/customer service
  DEV_USER // For Developers
  SENIOR_DEV // For Senior Developers
  CONTROLLER // Advanced admin with more controls
  SUPER_ADMIN // Can approve model updates and more
  KING // Highest level with critical controls like shutting down the app
}

// User information with enhanced authentication and tracking.
model User {
  id                     Int                     @id @default(autoincrement())
  username               String                  @unique
  email                  String                  @unique
  name                   String?
  lastLogin              DateTime?
  passwordResetToken     String?
  tokenExpiryDate        DateTime?
  type                   RoleType
  permissions            Json
  posts                  Post[]
  profile                Profile?
  roles                  UserRole[] // Association to UserRole for handling multiple roles
  interests              VehicleInterest[]
  apiUsages              ApiUsage[] // Relation to ApiUsage
  userActivityLogs       UserActivityLog[] // Track user activities
  favoriteVehicles       FavoriteVehicle[]
  priceDropNotifications PriceDropNotification[]
  customerFeedbacks      CustomerFeedback[]
  Notification           Notification[]
  ApiRateLimit           ApiRateLimit[]
  MFA                    MFA[]
  isDeleted              Boolean                 @default(false)
  deletedAt              DateTime?
  anonymizedAt           DateTime?
  PrivateSeller          PrivateSeller?

  @@index([username])
  @@index([email]) // Indexing email for faster lookup
}

// User roles for managing relationships and default roles.
model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId]) // Ensure unique combination per user-role
}

// Definition of roles with specific permissions.
model Role {
  id          Int          @id @default(autoincrement())
  type        RoleType
  permissions Json // JSON object to store permission details
  users       UserRole[] // Users associated with this role
  Permission  Permission[]
}

// Profile linked to a user, can include more personalized data.
model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------------------------
// Vehicle Management Models
// --------------------------------

// Dealership information including related entities like vehicles and subscriptions.
model Dealership {
  id                   Int                         @id @default(autoincrement())
  groupId              Int? // Optional group ID for dealership groups
  parentId             Int?
  parent               Dealership?                 @relation("ParentDealership", fields: [parentId], references: [id])
  children             Dealership[]                @relation("ParentDealership")
  name                 String
  countryCode          String
  address              String
  city                 String
  region               String
  postalCode           String
  descriptionEn        String?
  descriptionFr        String?
  phone                String?
  fax                  String?
  url                  String?
  inventoryActive      Boolean
  active               Boolean
  slug                 String
  email                String?
  defaultLanguage      String
  latitude             Float?
  longitude            Float?
  seoDescription       String?                     @default("")
  facebookUrl          String?
  twitterUrl           String?
  instagramUrl         String?
  youtubeUrl           String?
  linkedinUrl          String?
  pinterestUrl         String?
  vehicles             Vehicle[]                   @relation("DealershipVehicles")
  subscriptions        Subscription[]
  logos                Logo[]
  ownershipHistory     OwnershipHistory[]
  reviews              Review[]
  paymentHistory       PaymentHistory[]
  externalIntegrations ExternalIntegration[]
  favoritedBy          FavoriteVehicle[]
  priceNotifications   PriceDropNotification[]
  priceHistories       VehiclePriceHistory[]
  financeOptions       VehicleFinanceOption[]
  environmentalDatas   EnvironmentalData[]
  safetyRatings        VehicleSafetyRating[]
  customModRequests    CustomModificationRequest[]
  feedbacks            CustomerFeedback[]
  testDrives           TestDriveSchedule[]
  vehicleComparisons   VehicleComparison[]         @relation("DealershipVehicleComparisons")

  @@index([name])
  @@index([city])
  @@index([region])
}

// Private sellers on the platform with listings.
model PrivateSeller {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique // This ensures the one-to-one relationship
  name           String
  email          String           @unique
  phone          String?
  address        String?
  city           String?
  region         String?
  postalCode     String?
  vehicles       Vehicle[]        @relation("PrivateSellerVehicles")
  paymentHistory PaymentHistory[]
  user           User             @relation(fields: [userId], references: [id])

  @@index([userId]) // This index is now somewhat redundant due to the @unique constraint but can still improve lookup speeds
}


// Detailed vehicle model with various characteristics and related data.
model Vehicle {
  id                         Int                         @id @default(autoincrement())
  ownerId                    Int // Generic owner ID
  ownerType                  OwnerType // Distinguishes ownership between dealership or private seller
  dealership                 Dealership?                 @relation(name: "DealershipVehicles", fields: [ownerId], references: [id], map: "Vehicle_dealership_ownerId_fk1")
  privateSeller              PrivateSeller?              @relation(name: "PrivateSellerVehicles", fields: [ownerId], references: [id], map: "Vehicle_privateSeller_ownerId_fk1")
  interests                  VehicleInterest[]
  notifications              NotificationQueue[]
  summaries                  InterestSummary[]
  frameCategoryId            Int
  frameCategory              FrameCategory               @relation(fields: [frameCategoryId], references: [id])
  frameStyleId               Int
  frameStyle                 FrameStyle                  @relation(fields: [frameStyleId], references: [id])
  vin                        String                      @unique
  make                       String
  model                      String
  titleAd                    String
  trim                       String
  year                       Int
  mileage                    Int
  color                      String
  bodyType                   String
  fuelType                   String
  transmission               String
  numberOfDoors              Int
  interiorFeatures           Json?
  exteriorFeatures           Json?
  condition                  String
  price                      Float
  description                String?
  status                     VehicleStatus
  photos                     Json?
  location                   String?
  performanceData            Json?
  emissionDetails            Json?
  warrantyInformation        Json?
  listedAt                   DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  deleted                    Boolean                     @default(false)
  deletedAt                  DateTime?
  options                    Json? // JSON field for vehicle options like wheel, stereo upgrades, etc.
  securityFeatures           Json?
  batteryHealth              String? // Battery health status
  estimatedBatteryLife       Float? // Estimated remaining battery life in years or charge cycles
  chargeCycles               Int? // Number of completed charge cycles
  ecoRating                  String? // Sustainability rating
  auditLogs                  VehicleAuditLog[]
  vehicleOptions             VehicleOptions[]
  tags                       Tag[]                       @relation("VehicleTags")
  bookings                   Booking[]
  promotions                 Promotion[]
  serviceRecords             ServiceRecord[]
  insuranceDetails           InsuranceDetail[]
  priceHistory               PriceHistory[]
  conditionReports           ConditionReport[]
  comparisonData             Json?
  customModificationRequests CustomModificationRequest[]
  customerFeedbacks          CustomerFeedback[]
  testDriveSchedules         TestDriveSchedule[]
  externalIntegrations       ExternalIntegration[]
  FavoriteVehicle            FavoriteVehicle[]
  PriceDropNotification      PriceDropNotification[]
  VehiclePriceHistory        VehiclePriceHistory[]
  VehicleFinanceOption       VehicleFinanceOption[]
  EnvironmentalData          EnvironmentalData[]
  VehicleSafetyRating        VehicleSafetyRating[]
  mainComparisons            VehicleComparison[]         @relation("mainVehicleComparison")
  comparedComparisons        VehicleComparison[]         @relation("comparedVehicleComparison")
  latitude                   Float? // Optional to support location-based functionalities
  longitude                  Float? // Optional to support location-based functionalities
  VehicleVersion             VehicleVersion[]
  ArchivedVehicle            ArchivedVehicle[]

  @@index([make])
  @@index([model])
  @@index([trim])
  @@index([titleAd])
  @@index([location])
  @@index([make, model]) // Composite index for combined searches
  @@index([make, model, trim])
  @@index([location, make]) // Useful for location-based searches for a specific make
}

// Frame categories for vehicles.
model FrameCategory {
  id       Int       @id @default(autoincrement())
  name     String
  vehicles Vehicle[]
}

// Frame styles for vehicles.
model FrameStyle {
  id       Int       @id @default(autoincrement())
  name     String
  code     String // Unique code for the style
  vehicles Vehicle[]
}

// --------------------------------
// Subscription and Services Models
// --------------------------------

// Subscription model for dealerships.
model Subscription {
  id           Int        @id @default(autoincrement())
  dealershipId Int
  isActive     Boolean
  startDate    DateTime
  endDate      DateTime
  type         String
  dealership   Dealership @relation(fields: [dealershipId], references: [id])
}

// Logos associated with dealerships.
model Logo {
  id           Int        @id @default(autoincrement())
  dealershipId Int
  type         String // e.g., primary, secondary
  path         String
  dealership   Dealership @relation(fields: [dealershipId], references: [id])
}

// Ownership history for dealership changes.
model OwnershipHistory {
  id            Int        @id @default(autoincrement())
  dealershipId  Int
  previousOwner String
  newOwner      String
  changeDate    DateTime
  description   String? // Additional details about the ownership change
  dealership    Dealership @relation(fields: [dealershipId], references: [id])
}

// Enum definitions for owner types and vehicle statuses.
enum OwnerType {
  DEALERSHIP
  PRIVATE_SELLER
}

enum VehicleStatus {
  ACTIVE
  SUSPENDED
  SOLD
}

// Vehicle audit logs for tracking changes.
model VehicleAuditLog {
  id         Int      @id @default(autoincrement())
  vehicleId  Int
  beforeData Json
  afterData  Json
  changedBy  Int
  changeType String
  createdAt  DateTime @default(now())
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
}

// Options available for vehicles.
model VehicleOptions {
  id          Int     @id @default(autoincrement())
  vehicleId   Int // Connects to Vehicle
  name        String // Option name, e.g., "Sunroof", "Extended Warranty"
  description String? // Optional detailed description
  price       Float? // Additional cost if applicable
  vehicle     Vehicle @relation(fields: [vehicleId], references: [id])
}

// Tags associated with vehicles for categorization.
model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  type     String? // New field to categorize tags (e.g., "system", "user-generated")
  vehicles Vehicle[] @relation("VehicleTags")
}

// Reviews written about dealerships.
model Review {
  id           Int        @id @default(autoincrement())
  dealershipId Int
  authorId     Int // Assuming users can write reviews
  rating       Float // Rating score
  content      String // Review content
  createdAt    DateTime   @default(now())
  dealership   Dealership @relation(fields: [dealershipId], references: [id])
}

// Booking model for vehicle reservations.
model Booking {
  id            Int      @id @default(autoincrement())
  vehicleId     Int
  userId        Int // User who made the booking
  scheduledDate DateTime
  status        String // e.g., "Confirmed", "Completed", "Cancelled"
  createdAt     DateTime @default(now())
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id])
}

// Promotions linked to vehicles.
model Promotion {
  id          Int      @id @default(autoincrement())
  vehicleId   Int
  discount    Float // Percentage or fixed amount discount
  description String // Details about the promotion
  validFrom   DateTime
  validTo     DateTime
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
}

// Payment history for dealerships and private sellers.
model PaymentHistory {
  id            Int            @id @default(autoincrement())
  dealershipId  Int?
  sellerId      Int? // For private sellers
  amount        Float // Amount paid
  paymentDate   DateTime
  description   String // Description of what the payment was for
  dealership    Dealership?    @relation(fields: [dealershipId], references: [id])
  privateSeller PrivateSeller? @relation(fields: [sellerId], references: [id])
}

// Service records for vehicles.
model ServiceRecord {
  id          Int      @id @default(autoincrement())
  vehicleId   Int
  serviceDate DateTime
  details     String
  cost        Float?
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
}

// Insurance details for vehicles.
model InsuranceDetail {
  id              Int      @id @default(autoincrement())
  vehicleId       Int
  provider        String
  policyNumber    String
  startDate       DateTime
  endDate         DateTime
  coverageDetails Json
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
}

// Notifications for system alerts.
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  platform  String // "mobile", "desktop", or "all"
  status    String // "sent", "pending", "failed"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

// Price history tracking for vehicles.
model PriceHistory {
  id        Int      @id @default(autoincrement())
  vehicleId Int
  price     Float
  date      DateTime
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

// Condition reports for detailed vehicle inspections.
model ConditionReport {
  id        Int      @id @default(autoincrement())
  vehicleId Int
  report    Json
  createdAt DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

// Interest summary for tracking how many people are interested in a vehicle.
model InterestSummary {
  id          Int      @id @default(autoincrement())
  vehicleId   Int
  likesCount  Int      @default(0)
  sharesCount Int      @default(0)
  savesCount  Int      @default(0)
  lastUpdated DateTime @default(now())
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
}

// Notification queue for managing timed messages.
model NotificationQueue {
  id           Int                @id @default(autoincrement())
  vehicleId    Int
  message      String
  status       NotificationStatus // 'Pending', 'Sent'
  scheduledFor DateTime
  sentAt       DateTime?
  vehicle      Vehicle            @relation(fields: [vehicleId], references: [id])
}

// Enums for interest types and notification statuses.
enum InterestType {
  LIKE
  SHARE
  SAVE
}

enum NotificationStatus {
  PENDING
  SENT
}

// Vehicle interests to track user interactions with vehicle listings.
model VehicleInterest {
  id        Int          @id @default(autoincrement())
  vehicleId Int
  userId    Int
  type      InterestType
  createdAt DateTime     @default(now())
  vehicle   Vehicle      @relation(fields: [vehicleId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
}

// Additional models for tracking user and vehicle interactions.

// API usage tracking for users.
model ApiUsage {
  id       Int      @id @default(autoincrement())
  userId   Int
  endpoint String
  count    Int
  lastUsed DateTime
  user     User     @relation(fields: [userId], references: [id])
}

// External integration for vehicles or dealerships.
model ExternalIntegration {
  id           Int         @id @default(autoincrement())
  vehicleId    Int?
  dealershipId Int?
  externalId   String
  systemName   String
  details      Json
  vehicle      Vehicle?    @relation(fields: [vehicleId], references: [id])
  dealership   Dealership? @relation(fields: [dealershipId], references: [id])
}

// Custom modification requests for vehicles.
model CustomModificationRequest {
  id           Int         @id @default(autoincrement())
  vehicleId    Int
  details      Json
  status       String
  createdAt    DateTime    @default(now())
  vehicle      Vehicle     @relation(fields: [vehicleId], references: [id])
  Dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  dealershipId Int?
}

// Customer feedback for vehicles.
model CustomerFeedback {
  id           Int         @id @default(autoincrement())
  vehicleId    Int
  userId       Int
  rating       Float // Rating out of 5 or 10
  comment      String
  createdAt    DateTime    @default(now())
  vehicle      Vehicle     @relation(fields: [vehicleId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  Dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  dealershipId Int?
}

// Test drive scheduling for vehicles.
model TestDriveSchedule {
  id           Int         @id @default(autoincrement())
  vehicleId    Int
  date         DateTime
  startTime    DateTime
  endTime      DateTime
  status       String // Such as 'Scheduled', 'Completed', 'Cancelled'
  vehicle      Vehicle     @relation(fields: [vehicleId], references: [id])
  Dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  dealershipId Int?
}

// --------------------------------
// Additional models
// --------------------------------

// User activity log for tracking user actions within the platform.
model UserActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  action      String // Describes the action performed
  description String // Details about the action
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

// --------------------------------
// Enhanced Buyer Experience Models
// --------------------------------

// Model to track user's favorites or wish list items.
model FavoriteVehicle {
  id           Int         @id @default(autoincrement())
  userId       Int
  vehicleId    Int
  createdAt    DateTime    @default(now())
  user         User        @relation(fields: [userId], references: [id])
  vehicle      Vehicle     @relation(fields: [vehicleId], references: [id])
  Dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  dealershipId Int?
}

// Model to manage notifications for price drops and new listings.
model PriceDropNotification {
  id            Int         @id @default(autoincrement())
  userId        Int
  vehicleId     Int
  previousPrice Float
  newPrice      Float
  createdAt     DateTime    @default(now())
  notifiedAt    DateTime?
  user          User        @relation(fields: [userId], references: [id])
  vehicle       Vehicle     @relation(fields: [vehicleId], references: [id])
  Dealership    Dealership? @relation(fields: [dealershipId], references: [id])
  dealershipId  Int?
}

// Model for storing and retrieving vehicle price history.
model VehiclePriceHistory {
  id           Int         @id @default(autoincrement())
  vehicleId    Int
  price        Float
  date         DateTime
  vehicle      Vehicle     @relation(fields: [vehicleId], references: [id])
  Dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  dealershipId Int?
}

// Model for storing vehicle comparison data.
model VehicleComparison {
  id            Int      @id @default(autoincrement())
  vehicleId     Int
  comparedWith  Int
  dealershipId  Int?
  advantages    Json
  disadvantages Json
  createdAt     DateTime @default(now())

  vehicle         Vehicle     @relation(name: "mainVehicleComparison", fields: [vehicleId], references: [id])
  comparedVehicle Vehicle     @relation(name: "comparedVehicleComparison", fields: [comparedWith], references: [id])
  dealership      Dealership? @relation(name: "DealershipVehicleComparisons", fields: [dealershipId], references: [id])
}

// Model for financing options associated with a vehicle.
model VehicleFinanceOption {
  id           Int         @id @default(autoincrement())
  vehicleId    Int
  financeType  String // E.g., Loan, Lease
  terms        Json // Contains details like duration, interest rate, monthly payment
  provider     String // Name of the financial institution
  createdAt    DateTime    @default(now())
  vehicle      Vehicle     @relation(fields: [vehicleId], references: [id])
  Dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  dealershipId Int?
}

// Model for managing environmental impact data for vehicles.
model EnvironmentalData {
  id           Int         @id @default(autoincrement())
  vehicleId    Int
  emissions    Float // CO2 emissions in grams per km
  fuelEconomy  Float // Liters per 100 km
  ecoRating    String // E.g., A+, A, B, C
  createdAt    DateTime    @default(now())
  vehicle      Vehicle     @relation(fields: [vehicleId], references: [id])
  Dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  dealershipId Int?
}

// Model to store safety ratings from recognized authorities.
model VehicleSafetyRating {
  id           Int         @id @default(autoincrement())
  vehicleId    Int
  ratingAgency String // E.g., NHTSA, IIHS
  rating       String // E.g., 5 stars, 4 stars
  reportLink   String? // URL to the detailed report
  createdAt    DateTime    @default(now())
  vehicle      Vehicle     @relation(fields: [vehicleId], references: [id])
  Dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  dealershipId Int?
}

// Model for storing and analyzing sales and user interaction data
model AnalyticsData {
  id        Int      @id @default(autoincrement())
  metric    String
  value     Float
  timestamp DateTime @default(now())
  details   Json? // JSON to store additional data points or complex analytics results
}

model ScheduledTask {
  id           Int      @id @default(autoincrement())
  taskType     String
  scheduledFor DateTime
  status       String // e.g., "pending", "completed"
  details      Json?
}

model Permission {
  id          Int     @id @default(autoincrement())
  role        Role    @relation(fields: [roleId], references: [id])
  roleId      Int
  resource    String
  action      String
  description String?
}

model VehicleVersion {
  id           Int      @id @default(autoincrement())
  vehicleId    Int
  vehicle      Vehicle  @relation(fields: [vehicleId], references: [id])
  version      Int
  dataSnapshot Json
  createdAt    DateTime @default(now())
}

model ApiRateLimit {
  id       Int      @id @default(autoincrement())
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  endpoint String
  count    Int      @default(0)
  resetAt  DateTime
}

model MFA {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  secret    String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ArchivedVehicle {
  id         Int      @id
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId  Int
  archivedAt DateTime @default(now())
}
